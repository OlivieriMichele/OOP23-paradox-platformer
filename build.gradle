plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id("org.danilopianini.gradle-java-qa") version "0.40.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'

}

group 'com.project'
version '4.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
}

application {
    // mainModule = 'com.project.paradoxplatformer'
    mainClass = 'com.project.paradoxplatformer.App'
    applicationDefaultJvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
}


javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base', 'javafx.swing']
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    
    def javaFxVersion = "17"
    def javaFxModules = ["base","controls","fxml","swing","graphics"]
    def supportedSystems = ["win", "linux", "mac"]
    for (module in javaFxModules) {
        for (sys in supportedSystems) {
            implementation("org.openjfx:javafx-$module:$javaFxVersion:$sys")
        }
    }
    implementation("org.apache.commons:commons-lang3:3.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.12.0")
    implementation("com.fasterxml.jackson.core:jackson-core:2.12.0")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.12.0")
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:11.0.2'

    compileOnly("com.github.spotbugs:spotbugs-annotations:4.7.3")


}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    jvmArgs += [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

//  eclipse {
//      classpath {
//          containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
//          file {
//              whenMerged {
//                  entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
//                      it.entryAttributes['module'] = 'true'
//                  }
//                  entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
//                      it.entryAttributes['module'] = 'true'
//                  }

//              }
//          }
//      }
//  }

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes ('Main-Class': application.mainClass)
    }
}

run {
    standardInput = System.in
}





